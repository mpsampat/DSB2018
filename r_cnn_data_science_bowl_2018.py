#!/usr/bin/env python
## -*- coding: utf-8 -*-
"""R-CNN_Data_Science_Bowl_2018.ipynb

Automatically generated by Colaboratory.
"""

# Data download and unzipping
#!wget https://raw.githubusercontent.com/AakashSudhakar/2018-data-science-bowl/master/compressed_files/stage1_test.zip -c
#!wget https://raw.githubusercontent.com/AakashSudhakar/2018-data-science-bowl/master/compressed_files/stage1_train.zip -c
#!wget https://github.com/matterport/Mask_RCNN/archive/master.zip -c
#!wget https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5 -c
#!mkdir stage1_train stage1_test mask-rcnn

#!unzip stage1_train.zip -d stage1_train/
#!unzip stage1_test.zip -d stage1_test/
#!unzip -o master.zip -d mask-rcnn/

# Downloading and intstalling keras
#!pip install keras

import sys
sys.path.insert(0, 'Mask_RCNN-master')
from config import Config
import utils
import model as modellib
import visualize
from model import log
import os
import random
import warnings
import numpy as np
import pandas as pd
import math
import scipy
import scipy.ndimage as ndimage
from itertools import chain
from skimage.util import img_as_ubyte
from skimage.io import imread, imshow, imread_collection, concatenate_images, imsave
from skimage import transform
from skimage.morphology import label
import matplotlib.pyplot as plt
from keras.utils import Progbar
#from google.colab import files
from keras.models import Model, load_model
from keras.layers import Input
from keras.layers.core import Dropout, Lambda
from keras.layers.convolutional import Conv2D, Conv2DTranspose,Convolution2D
from keras.layers.pooling import MaxPooling2D
from keras.layers.merge import concatenate
from keras import backend as K
#pip install -U -q PyDrive
#from pydrive.auth import GoogleAuth
#from pydrive.drive import GoogleDrive
#from google.colab import auth
#from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
# This only needs to be done once in a notebook.
#auth.authenticate_user()
#gauth = GoogleAuth()
#gauth.credentials = GoogleCredentials.get_application_default()
#drive = GoogleDrive(gauth)

warnings.filterwarnings('ignore', category=UserWarning, module='skimage')
ignore_masks = ["ee43930956917b35e8ea9950119904ee43eeaf297ae2d0999a96bce06465119b.png", 
                "976fdddb84f5e86cc06b746252d103836124a0b0fa01865652789ee3ae1ebec0.png", 
                "e512fabd19592b09562cfabb45b7c3bff574d1f6818b7b53b5fede10016dc8b2.png", 
                "b82e80e4f8190720f38ea3fab4a05f133fd862b592db9ffd73f630500c7f94fb.png", 
                "879eb8b1875444d0f9e42755b1007978f9c3706285e862c7c42bf4900d1a5c1f.png", 
                "4713d7309386224347ea05586644b2fad515c272463c1662236109d1755191d9.png", 
                "493e574250a73120c05755367a2d032940563fdad88451d3ac42703fa93e1f8e.png", 
                "7ac528af7d96b1bae71a3b07d3f8de6dcde063c3dc2a84500fae46e46cd76bc6.png", 
                "777459648d2c4c18fe8df79e284fbec4decc5f3ffaf26930ec7d3d457b84ae62.png", 
                "9551f2dad01c71f81d5e2386a99bc963457338d0c79fda0e90e9226f50b5dada.png", 
                "069acba0cce8b22a267edd80e6c4303d9f8dd980bdcea0cf2569079b02cf6b41.png", 
                "4cff40e93297cd84240c4e05d861efc4c6c8ad6cab073968e75fea862639439e.png", 
                "2ec5a0547b47b663b91224a0b0b031ba26c6d81dd8c2271a0142ff50e7a3c90e.png", 
                "e707c768392b287baffc9307f2dc0d6a9993e40bcae8945caf0925bc789e4259.png", 
                "cd443eb126f389fb815a24b65035b306268bcfc3b4ad077c58110c5c1255805b.png", 
                "b9a160bc22b20d83a529f71b75f8ac11bed4f306c3d02d3d5496cefcda91666a.png", 
                "1f06b1d1ef191b4a0ecf28636d017d143114ac3e4760f0eb35f56af006d41a62.png", 
                "e969172b62b37ba15754478b69cefce1bf61534b46b4ac9e80e07a410815cfdc.png", 
                "0a0cb3d0373050e8f63302c2c1ab79c9a35249e98dda568418e79222eb9beb6f.png"]

# Data Path
TRAIN_PATH = 'stage1_train/'
TEST_PATH = 'stage1_test/'

# Get train and test IDs
train_ids = next(os.walk(TRAIN_PATH))[1]
test_ids = next(os.walk(TEST_PATH))[1]

def get_ax(rows=1, cols=1, size=8):
    """Return a Matplotlib Axes array to be used in
    all visualizations in the notebook. Provide a
    central point to control graph sizes.
    
    Change the default size attribute to control the size
    of rendered images
    """
    _, ax = plt.subplots(rows, cols, figsize=(size*cols, size*rows))
    return ax

class NucleiConfig(Config):
  """Configuration for training on the toy shapes dataset.
  Derives from the base Config class and overrides values specific
  to the toy shapes dataset.
  """
  # Give the configuration a recognizable name
  NAME = "nuclei"

  # Train on 1 GPU and 8 images per GPU. We can put multiple images on each
  # GPU because the images are small. Batch size is 8 (GPUs * images/GPU).
  GPU_COUNT = 1
  IMAGES_PER_GPU = 1

  # Number of classes (including background)
  NUM_CLASSES = 1 + 1  # background + nuclei

  # Use small images for faster training. Set the limits of the small side
  # the large side, and that determines the image shape.
  IMAGE_MIN_DIM = 256
  IMAGE_MAX_DIM = 256

  # Use smaller anchors because our image and objects are small
  RPN_ANCHOR_SCALES = (4,8,16,32,64)  # anchor side in pixels

  # Reduce training ROIs per image because the images are small and have
  # few objects. Aim to allow ROI sampling to pick 33% positive ROIs.
  TRAIN_ROIS_PER_IMAGE = 500
  
  MEAN_PIXEL = [0, 0, 0]
  
  DETECTION_MAX_INSTANCES = 128
  
  STEPS_PER_EPOCH = 600
  LEARNING_RATE = 5e-04
  WEIGHT_DECAY = 0.0001
  USE_MINI_MASK = True
  MAX_GT_INSTANCES = 500
  VALIDATION_STEPS = 70
    
config = NucleiConfig()
config.display()

class NucleiDataset(utils.Dataset):
  
    def load_nuclei(self, dataset, width, height):
      self.add_class("nuclei", 1, "nucleus")
      self.add_class("nuclei", 2, "background")
      
      train_dir = "stage1_train/"
      
      listdir = os.listdir(train_dir)
      if dataset == "train":
        listdir = listdir[:570]
      elif dataset == "val":
        listdir = listdir[571:]
      for i,file in enumerate(listdir):
        self.add_image("nuclei", image_id=i, path=file, width=width, height=height)   
  
    def load_image(self, image_id):
      info = self.image_info[image_id]
      image_path = info["path"]
      full_path = "stage1_train/%s/images/%s.png" % (image_path, image_path)
      image = imread(full_path)[:,:,:3]
      #print(full_path)
      #print(image.shape)
      image = transform.resize(image, (256, 256))
      mean = np.mean(image)
      std  = np.std(image)
      image = (image - mean)/std
      return image

    def image_reference(self, image_id):
      return image_id

    def load_mask(self, image_id):
      info = self.image_info[image_id]
      image_path = info["path"]
      mask_dir = "stage1_train/%s/masks/" % (image_path)

      mask_ldir = os.listdir(mask_dir)
      mask = np.zeros((256, 256, len(mask_ldir)))
      
      counter = 0
      for file in mask_ldir:
        if file in ignore_masks:
          continue
        mask_path = mask_dir + file
        loaded_mask = imread(mask_path)
        loaded_mask = transform.resize(loaded_mask, (256, 256))
        ndimage.binary_fill_holes(loaded_mask).astype(int)
        if np.count_nonzero(loaded_mask) == 0:
          continue
        else:
          mask[:,:,counter] = loaded_mask
          counter+=1
      
      mask = mask[:,:,0:counter]

      class_ids = np.array([1 for _ in range(np.size(mask, 2))])
      return mask, class_ids.astype(np.int32)

# Training dataset
dataset_train = NucleiDataset()
dataset_train.load_nuclei('train',256,256)
dataset_train.prepare()

# Testing dataset
dataset_val = NucleiDataset()
dataset_val.load_nuclei('val',256,256)
dataset_val.prepare()

os.name = "nt"

# Create model in training mode
model = modellib.MaskRCNN(mode="training", config=config,
                          model_dir="")

# Which weights to start with?
init_with = "coco"  # imagenet, coco, or last

if init_with == "imagenet":
  model.load_weights(model.get_imagenet_weights(), by_name=True)
elif init_with == "coco":
  # Load weights trained on MS COCO, but skip layers that
  # are different due to the different number of classes
  # See README for instructions to download the COCO weights
  model.load_weights("mask_rcnn_coco.h5", by_name=True,
                     exclude=["mrcnn_class_logits", "mrcnn_bbox_fc", 
                              "mrcnn_bbox", "mrcnn_mask"])
elif init_with == "last":
  # Load the last model you trained and continue training
  model.load_weights(model.find_last()[1], by_name=True)

elif init_with == "self":
  file_id = '1LqofnpPDIySZE-oa62EFhkDSg1RM6HXy'
  downloaded = drive.CreateFile({'id': file_id})
  downloaded.GetContentFile('mask_rcnn_nuclei.h5')
  model.load_weights('mask_rcnn_nuclei.h5')
  
  
# Train the head branches
# Passing layers="heads" freezes all layers except the head
# layers. You can also pass a regular expression to select
# which layers to train by name pattern.
model.train(dataset_train, dataset_val, 
            learning_rate=config.LEARNING_RATE, 
            epochs=10, 
            layers='heads')

# Fine tune all layers
# Passing layers="all" trains all layers. You can also 
# pass a regular expression to select which layers to
# train by name pattern.
model.train(dataset_train, dataset_val, 
            learning_rate=config.LEARNING_RATE / 10,
            epochs=40, 
            layers="all")

model.keras_model.save_weights("mask_rcnn_nuclei.h5")

#from google.colab import files
#model.keras_model.save_weights("mask_rcnn_nuclei.h5")
#files.download('mask_rcnn_nuclei.h5')

class InferenceConfig(NucleiConfig):
    GPU_COUNT = 1
    IMAGES_PER_GPU = 1

inference_config = InferenceConfig()

# Recreate the model in inference mode
model = modellib.MaskRCNN(mode="inference", 
                          config=inference_config,
                          model_dir="")

# Get path to saved weights
# Either set a specific path or find last trained weights
# model_path = os.path.join(ROOT_DIR, ".h5 file name here")
#4/AACN-IIRYNg3lXSTZKsV5-K5rLHbZfbFEOo2opEP8DbeVgDxs88UhXEmodel_path = model.find_last()[1]

# Load trained weights (fill in path to trained weights here)
model_path = "mask_rcnn_nuclei.h5"
model.load_weights(model_path, by_name=True)

# Test on a random image
image_id = random.choice(dataset_val.image_ids)
original_image, image_meta, gt_class_id, gt_bbox, gt_mask =\
    modellib.load_image_gt(dataset_val, inference_config, 
                           image_id, use_mini_mask=False)

log("original_image", original_image)
log("image_meta", image_meta)
log("gt_class_id", gt_class_id)
log("gt_bbox", gt_bbox)
log("gt_mask", gt_mask)

#visualize.display_instances(original_image, gt_bbox, gt_mask, gt_class_id, 
#                            dataset_train.class_names, figsize=(8, 8))

results = model.detect([original_image], verbose=1)

#r = results[0]
#visualize.display_instances(original_image, r['rois'], r['masks'], r['class_ids'], 
#                            dataset_val.class_names, r['scores'], ax=get_ax())

#imshow(r['masks'][:,:,1])

def rle_encoding(x):
    dots = np.where(x.T.flatten() == 1)[0]
    run_lengths = []
    prev = -2
    for b in dots:
        if (b>prev+1): run_lengths.extend((b + 1, 0))
        run_lengths[-1] += 1
        prev = b
    return run_lengths

def prob_to_rles(x, cutoff=0.5):
    lab_img = label(x > cutoff)
    for i in range(1, lab_img.max() + 1):
        yield rle_encoding(lab_img == i)

test_images = next(os.walk("stage1_test/"))[1]

new_test_ids = []
rles = []
for n, image in enumerate(test_images):
  inp_image = imread("stage1_test/" + image + "/images/" + image + ".png")[:,:,:3]
  orig_shape = np.shape(inp_image)
  inp_image = transform.resize(inp_image, (256, 256))
  mean = np.mean(inp_image)
  std  = np.std(inp_image)
  inp_image = (inp_image - mean)/std
  results = model.detect([inp_image], verbose=1)
  
  r = results[0]
  
  mask_list = []
  mask_sum = np.zeros((256,256))
  for i in range(np.shape(r['masks'])[2]):
    ind_x, ind_y = np.nonzero(r['masks'][:,:,i])
    mask_sum[ind_x,ind_y] = i
  
  for i in range(np.shape(r['masks'])[2]):
    ind_x,ind_y = np.where(mask_sum==i)
    mask = np.zeros((256,256))
    mask[ind_x,ind_y] = 1
    mask = transform.resize(mask, (list(orig_shape)[0],list(orig_shape)[1]))
    mask_list.append(mask)
    
    
  '''for i in range(1,np.shape(r['masks'])[2]):
    imsave("masks/%s_%d.png" % (image, i), mask_list[i])'''
  
  for i in range(1,np.shape(r['masks'])[2]):
    rle = list(prob_to_rles(mask_list[i]))
    rles.extend(rle)
    new_test_ids.extend([image] * len(rle))
  
sub = pd.DataFrame()
sub['ImageId'] = new_test_ids
sub['EncodedPixels'] = pd.Series(rles).apply(lambda x: ' '.join(str(y) for y in x))
sub.to_csv('sub-dsbowl2018-1.csv', index=False)
  
#!zip -r masks.zip masks
#!ls


#from google.colab import files

#files.download('sub-dsbowl2018-1.csv')
#files.download('masks.zip')
